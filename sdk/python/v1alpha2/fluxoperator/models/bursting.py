# coding: utf-8

"""
    fluxoperator

    Python SDK for Flux-Operator

    The version of the OpenAPI document: v1alpha2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from fluxoperator.models.bursted_cluster import BurstedCluster
from fluxoperator.models.flux_broker import FluxBroker
from typing import Optional, Set
from typing_extensions import Self

class Bursting(BaseModel):
    """
    Bursting Config For simplicity, we internally handle the name of the job (hostnames)
    """ # noqa: E501
    clusters: Optional[List[BurstedCluster]] = Field(default=None, description="External clusters to burst to. Each external cluster must share the same listing to align ranks")
    hostlist: Optional[StrictStr] = Field(default='', description="Hostlist is a custom hostlist for the broker.toml that includes the local plus bursted cluster. This is typically used for bursting to another resource type, where we can predict the hostnames but they don't follow the same convention as the Flux Operator")
    lead_broker: Optional[FluxBroker] = Field(default=None, alias="leadBroker")
    __properties: ClassVar[List[str]] = ["clusters", "hostlist", "leadBroker"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Bursting from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in clusters (list)
        _items = []
        if self.clusters:
            for _item in self.clusters:
                if _item:
                    _items.append(_item.to_dict())
            _dict['clusters'] = _items
        # override the default output from pydantic by calling `to_dict()` of lead_broker
        if self.lead_broker:
            _dict['leadBroker'] = self.lead_broker.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Bursting from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clusters": [BurstedCluster.from_dict(_item) for _item in obj["clusters"]] if obj.get("clusters") is not None else None,
            "hostlist": obj.get("hostlist") if obj.get("hostlist") is not None else '',
            "leadBroker": FluxBroker.from_dict(obj["leadBroker"]) if obj.get("leadBroker") is not None else None
        })
        return _obj


