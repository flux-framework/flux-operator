# coding: utf-8

"""
    fluxoperator

    Python SDK for Flux-Operator

    The version of the OpenAPI document: v1alpha2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PodSpec(BaseModel):
    """
    PodSpec controlls variables for the cluster pod
    """ # noqa: E501
    annotations: Optional[Dict[str, StrictStr]] = Field(default=None, description="Annotations for each pod")
    automount_service_account_token: Optional[StrictBool] = Field(default=None, description="Automatically mount the service account name", alias="automountServiceAccountToken")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Labels for each pod")
    node_selector: Optional[Dict[str, StrictStr]] = Field(default=None, description="NodeSelectors for a pod", alias="nodeSelector")
    resources: Optional[Dict[str, IntOrString]] = Field(default=None, description="Resources include limits and requests")
    restart_policy: Optional[StrictStr] = Field(default=None, description="Restart Policy", alias="restartPolicy")
    runtime_class_name: Optional[StrictStr] = Field(default=None, description="RuntimeClassName for the pod", alias="runtimeClassName")
    scheduler_name: Optional[StrictStr] = Field(default=None, description="Scheduler name for the pod", alias="schedulerName")
    service_account_name: Optional[StrictStr] = Field(default=None, description="Service account name for the pod", alias="serviceAccountName")
    __properties: ClassVar[List[str]] = ["annotations", "automountServiceAccountToken", "labels", "nodeSelector", "resources", "restartPolicy", "runtimeClassName", "schedulerName", "serviceAccountName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PodSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in resources (dict)
        _field_dict = {}
        if self.resources:
            for _key in self.resources:
                if self.resources[_key]:
                    _field_dict[_key] = self.resources[_key].to_dict()
            _dict['resources'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PodSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "annotations": obj.get("annotations"),
            "automountServiceAccountToken": obj.get("automountServiceAccountToken"),
            "labels": obj.get("labels"),
            "nodeSelector": obj.get("nodeSelector"),
            "resources": dict(
                (_k, IntOrString.from_dict(_v))
                for _k, _v in obj["resources"].items()
            )
            if obj.get("resources") is not None
            else None,
            "restartPolicy": obj.get("restartPolicy"),
            "runtimeClassName": obj.get("runtimeClassName"),
            "schedulerName": obj.get("schedulerName"),
            "serviceAccountName": obj.get("serviceAccountName")
        })
        return _obj


