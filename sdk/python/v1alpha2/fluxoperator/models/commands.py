# coding: utf-8

"""
    fluxoperator

    Python SDK for Flux-Operator

    The version of the OpenAPI document: v1alpha2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Commands(BaseModel):
    """
    Commands
    """ # noqa: E501
    broker_pre: Optional[StrictStr] = Field(default='', description="A single command for only the broker to run", alias="brokerPre")
    init: Optional[StrictStr] = Field(default='', description="init command is run before anything")
    post: Optional[StrictStr] = Field(default='', description="post command is run in the entrypoint when the broker exits / finishes")
    pre: Optional[StrictStr] = Field(default='', description="pre command is run after global PreCommand, after asFlux is set (can override)")
    prefix: Optional[StrictStr] = Field(default='', description="Prefix to flux start / submit / broker Typically used for a wrapper command to mount, etc.")
    script: Optional[StrictStr] = Field(default='', description="Custom script for submit (e.g., multiple lines)")
    service_pre: Optional[StrictStr] = Field(default='', description="A command only for service start.sh tor run", alias="servicePre")
    worker_pre: Optional[StrictStr] = Field(default='', description="A command only for workers to run", alias="workerPre")
    __properties: ClassVar[List[str]] = ["brokerPre", "init", "post", "pre", "prefix", "script", "servicePre", "workerPre"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Commands from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Commands from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "brokerPre": obj.get("brokerPre") if obj.get("brokerPre") is not None else '',
            "init": obj.get("init") if obj.get("init") is not None else '',
            "post": obj.get("post") if obj.get("post") is not None else '',
            "pre": obj.get("pre") if obj.get("pre") is not None else '',
            "prefix": obj.get("prefix") if obj.get("prefix") is not None else '',
            "script": obj.get("script") if obj.get("script") is not None else '',
            "servicePre": obj.get("servicePre") if obj.get("servicePre") is not None else '',
            "workerPre": obj.get("workerPre") if obj.get("workerPre") is not None else ''
        })
        return _obj


