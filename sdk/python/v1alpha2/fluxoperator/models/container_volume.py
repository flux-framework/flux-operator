# coding: utf-8

"""
    fluxoperator

    Python SDK for Flux-Operator  # noqa: E501

    The version of the OpenAPI document: v1alpha2
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from fluxoperator.configuration import Configuration


class ContainerVolume(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'claim_name': 'str',
        'config_map_name': 'str',
        'host_path': 'str',
        'items': 'dict[str, str]',
        'path': 'str',
        'read_only': 'bool',
        'secret_name': 'str'
    }

    attribute_map = {
        'claim_name': 'claimName',
        'config_map_name': 'configMapName',
        'host_path': 'hostPath',
        'items': 'items',
        'path': 'path',
        'read_only': 'readOnly',
        'secret_name': 'secretName'
    }

    def __init__(self, claim_name=None, config_map_name=None, host_path=None, items=None, path=None, read_only=False, secret_name=None, local_vars_configuration=None):  # noqa: E501
        """ContainerVolume - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._claim_name = None
        self._config_map_name = None
        self._host_path = None
        self._items = None
        self._path = None
        self._read_only = None
        self._secret_name = None
        self.discriminator = None

        if claim_name is not None:
            self.claim_name = claim_name
        if config_map_name is not None:
            self.config_map_name = config_map_name
        if host_path is not None:
            self.host_path = host_path
        if items is not None:
            self.items = items
        if path is not None:
            self.path = path
        if read_only is not None:
            self.read_only = read_only
        if secret_name is not None:
            self.secret_name = secret_name

    @property
    def claim_name(self):
        """Gets the claim_name of this ContainerVolume.  # noqa: E501

        Claim name if the existing volume is a PVC  # noqa: E501

        :return: The claim_name of this ContainerVolume.  # noqa: E501
        :rtype: str
        """
        return self._claim_name

    @claim_name.setter
    def claim_name(self, claim_name):
        """Sets the claim_name of this ContainerVolume.

        Claim name if the existing volume is a PVC  # noqa: E501

        :param claim_name: The claim_name of this ContainerVolume.  # noqa: E501
        :type claim_name: str
        """

        self._claim_name = claim_name

    @property
    def config_map_name(self):
        """Gets the config_map_name of this ContainerVolume.  # noqa: E501

        Config map name if the existing volume is a config map You should also define items if you are using this  # noqa: E501

        :return: The config_map_name of this ContainerVolume.  # noqa: E501
        :rtype: str
        """
        return self._config_map_name

    @config_map_name.setter
    def config_map_name(self, config_map_name):
        """Sets the config_map_name of this ContainerVolume.

        Config map name if the existing volume is a config map You should also define items if you are using this  # noqa: E501

        :param config_map_name: The config_map_name of this ContainerVolume.  # noqa: E501
        :type config_map_name: str
        """

        self._config_map_name = config_map_name

    @property
    def host_path(self):
        """Gets the host_path of this ContainerVolume.  # noqa: E501

        An existing hostPath to bind to path  # noqa: E501

        :return: The host_path of this ContainerVolume.  # noqa: E501
        :rtype: str
        """
        return self._host_path

    @host_path.setter
    def host_path(self, host_path):
        """Sets the host_path of this ContainerVolume.

        An existing hostPath to bind to path  # noqa: E501

        :param host_path: The host_path of this ContainerVolume.  # noqa: E501
        :type host_path: str
        """

        self._host_path = host_path

    @property
    def items(self):
        """Gets the items of this ContainerVolume.  # noqa: E501

        Items (key and paths) for the config map  # noqa: E501

        :return: The items of this ContainerVolume.  # noqa: E501
        :rtype: dict[str, str]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this ContainerVolume.

        Items (key and paths) for the config map  # noqa: E501

        :param items: The items of this ContainerVolume.  # noqa: E501
        :type items: dict[str, str]
        """

        self._items = items

    @property
    def path(self):
        """Gets the path of this ContainerVolume.  # noqa: E501

        Path and claim name are always required if a secret isn't defined  # noqa: E501

        :return: The path of this ContainerVolume.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ContainerVolume.

        Path and claim name are always required if a secret isn't defined  # noqa: E501

        :param path: The path of this ContainerVolume.  # noqa: E501
        :type path: str
        """

        self._path = path

    @property
    def read_only(self):
        """Gets the read_only of this ContainerVolume.  # noqa: E501


        :return: The read_only of this ContainerVolume.  # noqa: E501
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this ContainerVolume.


        :param read_only: The read_only of this ContainerVolume.  # noqa: E501
        :type read_only: bool
        """

        self._read_only = read_only

    @property
    def secret_name(self):
        """Gets the secret_name of this ContainerVolume.  # noqa: E501

        An existing secret  # noqa: E501

        :return: The secret_name of this ContainerVolume.  # noqa: E501
        :rtype: str
        """
        return self._secret_name

    @secret_name.setter
    def secret_name(self, secret_name):
        """Sets the secret_name of this ContainerVolume.

        An existing secret  # noqa: E501

        :param secret_name: The secret_name of this ContainerVolume.  # noqa: E501
        :type secret_name: str
        """

        self._secret_name = secret_name

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContainerVolume):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ContainerVolume):
            return True

        return self.to_dict() != other.to_dict()
