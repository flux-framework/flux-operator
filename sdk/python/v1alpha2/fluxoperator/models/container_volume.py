# coding: utf-8

"""
    fluxoperator

    Python SDK for Flux-Operator

    The version of the OpenAPI document: v1alpha2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ContainerVolume(BaseModel):
    """
    ContainerVolume
    """ # noqa: E501
    claim_name: Optional[StrictStr] = Field(default=None, description="Claim name if the existing volume is a PVC", alias="claimName")
    config_map_name: Optional[StrictStr] = Field(default=None, description="Config map name if the existing volume is a config map You should also define items if you are using this", alias="configMapName")
    empty_dir: Optional[StrictBool] = Field(default=False, alias="emptyDir")
    empty_dir_medium: Optional[StrictStr] = Field(default=None, description="Add an empty directory custom type", alias="emptyDirMedium")
    empty_dir_size_limit: Optional[StrictStr] = Field(default=None, description="Add an empty directory sizeLimit", alias="emptyDirSizeLimit")
    host_path: Optional[StrictStr] = Field(default=None, description="An existing hostPath to bind to path", alias="hostPath")
    items: Optional[Dict[str, StrictStr]] = Field(default=None, description="Items (key and paths) for the config map")
    path: Optional[StrictStr] = Field(default=None, description="Path and claim name are always required if a secret isn't defined")
    read_only: Optional[StrictBool] = Field(default=False, alias="readOnly")
    secret_name: Optional[StrictStr] = Field(default=None, description="An existing secret", alias="secretName")
    __properties: ClassVar[List[str]] = ["claimName", "configMapName", "emptyDir", "emptyDirMedium", "emptyDirSizeLimit", "hostPath", "items", "path", "readOnly", "secretName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContainerVolume from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContainerVolume from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "claimName": obj.get("claimName"),
            "configMapName": obj.get("configMapName"),
            "emptyDir": obj.get("emptyDir") if obj.get("emptyDir") is not None else False,
            "emptyDirMedium": obj.get("emptyDirMedium"),
            "emptyDirSizeLimit": obj.get("emptyDirSizeLimit"),
            "hostPath": obj.get("hostPath"),
            "items": obj.get("items"),
            "path": obj.get("path"),
            "readOnly": obj.get("readOnly") if obj.get("readOnly") is not None else False,
            "secretName": obj.get("secretName")
        })
        return _obj


