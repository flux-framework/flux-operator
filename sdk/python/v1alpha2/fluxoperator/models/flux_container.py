# coding: utf-8

"""
    fluxoperator

    Python SDK for Flux-Operator

    The version of the OpenAPI document: v1alpha2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from fluxoperator.models.container_resources import ContainerResources
from typing import Optional, Set
from typing_extensions import Self

class FluxContainer(BaseModel):
    """
    A FluxContainer is equivalent to a MiniCluster container but has a different default image
    """ # noqa: E501
    disable: Optional[StrictBool] = Field(default=False, description="Disable the sidecar container, assuming that the main application container has flux")
    image: Optional[StrictStr] = 'ghcr.io/converged-computing/flux-view-rocky:tag-9'
    image_pull_secret: Optional[StrictStr] = Field(default='', description="Allow the user to pull authenticated images By default no secret is selected. Setting this with the name of an already existing imagePullSecret will specify that secret in the pod spec.", alias="imagePullSecret")
    mount_path: Optional[StrictStr] = Field(default='/mnt/flux', description="Mount path for flux to be at (will be added to path)", alias="mountPath")
    name: Optional[StrictStr] = Field(default='flux-view', description="Container name is only required for non flux runners")
    pull_always: Optional[StrictBool] = Field(default=False, description="Allow the user to dictate pulling By default we pull if not present. Setting this to true will indicate to pull always", alias="pullAlways")
    python_path: Optional[StrictStr] = Field(default='', description="Customize python path for flux", alias="pythonPath")
    resources: Optional[ContainerResources] = None
    working_dir: Optional[StrictStr] = Field(default='', description="Working directory to run command from", alias="workingDir")
    __properties: ClassVar[List[str]] = ["disable", "image", "imagePullSecret", "mountPath", "name", "pullAlways", "pythonPath", "resources", "workingDir"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FluxContainer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of resources
        if self.resources:
            _dict['resources'] = self.resources.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FluxContainer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "disable": obj.get("disable") if obj.get("disable") is not None else False,
            "image": obj.get("image") if obj.get("image") is not None else 'ghcr.io/converged-computing/flux-view-rocky:tag-9',
            "imagePullSecret": obj.get("imagePullSecret") if obj.get("imagePullSecret") is not None else '',
            "mountPath": obj.get("mountPath") if obj.get("mountPath") is not None else '/mnt/flux',
            "name": obj.get("name") if obj.get("name") is not None else 'flux-view',
            "pullAlways": obj.get("pullAlways") if obj.get("pullAlways") is not None else False,
            "pythonPath": obj.get("pythonPath") if obj.get("pythonPath") is not None else '',
            "resources": ContainerResources.from_dict(obj["resources"]) if obj.get("resources") is not None else None,
            "workingDir": obj.get("workingDir") if obj.get("workingDir") is not None else ''
        })
        return _obj


