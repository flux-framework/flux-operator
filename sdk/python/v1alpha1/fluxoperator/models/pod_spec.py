# coding: utf-8

"""
    fluxoperator

    Python SDK for Flux-Operator  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from fluxoperator.configuration import Configuration


class PodSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'annotations': 'dict(str, str)',
        'labels': 'dict(str, str)',
        'node_selector': 'dict(str, str)',
        'resources': 'dict(str, IntOrString)',
        'service_account_name': 'str'
    }

    attribute_map = {
        'annotations': 'annotations',
        'labels': 'labels',
        'node_selector': 'nodeSelector',
        'resources': 'resources',
        'service_account_name': 'serviceAccountName'
    }

    def __init__(self, annotations=None, labels=None, node_selector=None, resources=None, service_account_name=None, local_vars_configuration=None):  # noqa: E501
        """PodSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._annotations = None
        self._labels = None
        self._node_selector = None
        self._resources = None
        self._service_account_name = None
        self.discriminator = None

        if annotations is not None:
            self.annotations = annotations
        if labels is not None:
            self.labels = labels
        if node_selector is not None:
            self.node_selector = node_selector
        if resources is not None:
            self.resources = resources
        if service_account_name is not None:
            self.service_account_name = service_account_name

    @property
    def annotations(self):
        """Gets the annotations of this PodSpec.  # noqa: E501

        Annotations for each pod  # noqa: E501

        :return: The annotations of this PodSpec.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this PodSpec.

        Annotations for each pod  # noqa: E501

        :param annotations: The annotations of this PodSpec.  # noqa: E501
        :type annotations: dict(str, str)
        """

        self._annotations = annotations

    @property
    def labels(self):
        """Gets the labels of this PodSpec.  # noqa: E501

        Labels for each pod  # noqa: E501

        :return: The labels of this PodSpec.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this PodSpec.

        Labels for each pod  # noqa: E501

        :param labels: The labels of this PodSpec.  # noqa: E501
        :type labels: dict(str, str)
        """

        self._labels = labels

    @property
    def node_selector(self):
        """Gets the node_selector of this PodSpec.  # noqa: E501

        NodeSelectors for a pod  # noqa: E501

        :return: The node_selector of this PodSpec.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._node_selector

    @node_selector.setter
    def node_selector(self, node_selector):
        """Sets the node_selector of this PodSpec.

        NodeSelectors for a pod  # noqa: E501

        :param node_selector: The node_selector of this PodSpec.  # noqa: E501
        :type node_selector: dict(str, str)
        """

        self._node_selector = node_selector

    @property
    def resources(self):
        """Gets the resources of this PodSpec.  # noqa: E501

        Resources include limits and requests  # noqa: E501

        :return: The resources of this PodSpec.  # noqa: E501
        :rtype: dict(str, IntOrString)
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this PodSpec.

        Resources include limits and requests  # noqa: E501

        :param resources: The resources of this PodSpec.  # noqa: E501
        :type resources: dict(str, IntOrString)
        """

        self._resources = resources

    @property
    def service_account_name(self):
        """Gets the service_account_name of this PodSpec.  # noqa: E501

        Service account name for the pod  # noqa: E501

        :return: The service_account_name of this PodSpec.  # noqa: E501
        :rtype: str
        """
        return self._service_account_name

    @service_account_name.setter
    def service_account_name(self, service_account_name):
        """Sets the service_account_name of this PodSpec.

        Service account name for the pod  # noqa: E501

        :param service_account_name: The service_account_name of this PodSpec.  # noqa: E501
        :type service_account_name: str
        """

        self._service_account_name = service_account_name

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PodSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PodSpec):
            return True

        return self.to_dict() != other.to_dict()
