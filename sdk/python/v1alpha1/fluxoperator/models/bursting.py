# coding: utf-8

"""
    fluxoperator

    Python SDK for Flux-Operator  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from fluxoperator.configuration import Configuration


class Bursting(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'clusters': 'list[BurstedCluster]',
        'hostlist': 'str',
        'lead_broker': 'FluxBroker'
    }

    attribute_map = {
        'clusters': 'clusters',
        'hostlist': 'hostlist',
        'lead_broker': 'leadBroker'
    }

    def __init__(self, clusters=None, hostlist='', lead_broker=None, local_vars_configuration=None):  # noqa: E501
        """Bursting - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._clusters = None
        self._hostlist = None
        self._lead_broker = None
        self.discriminator = None

        if clusters is not None:
            self.clusters = clusters
        if hostlist is not None:
            self.hostlist = hostlist
        if lead_broker is not None:
            self.lead_broker = lead_broker

    @property
    def clusters(self):
        """Gets the clusters of this Bursting.  # noqa: E501

        External clusters to burst to. Each external cluster must share the same listing to align ranks  # noqa: E501

        :return: The clusters of this Bursting.  # noqa: E501
        :rtype: list[BurstedCluster]
        """
        return self._clusters

    @clusters.setter
    def clusters(self, clusters):
        """Sets the clusters of this Bursting.

        External clusters to burst to. Each external cluster must share the same listing to align ranks  # noqa: E501

        :param clusters: The clusters of this Bursting.  # noqa: E501
        :type clusters: list[BurstedCluster]
        """

        self._clusters = clusters

    @property
    def hostlist(self):
        """Gets the hostlist of this Bursting.  # noqa: E501

        Hostlist is a custom hostlist for the broker.toml that includes the local plus bursted cluster. This is typically used for bursting to another resource type, where we can predict the hostnames but they don't follow the same convention as the Flux Operator  # noqa: E501

        :return: The hostlist of this Bursting.  # noqa: E501
        :rtype: str
        """
        return self._hostlist

    @hostlist.setter
    def hostlist(self, hostlist):
        """Sets the hostlist of this Bursting.

        Hostlist is a custom hostlist for the broker.toml that includes the local plus bursted cluster. This is typically used for bursting to another resource type, where we can predict the hostnames but they don't follow the same convention as the Flux Operator  # noqa: E501

        :param hostlist: The hostlist of this Bursting.  # noqa: E501
        :type hostlist: str
        """

        self._hostlist = hostlist

    @property
    def lead_broker(self):
        """Gets the lead_broker of this Bursting.  # noqa: E501


        :return: The lead_broker of this Bursting.  # noqa: E501
        :rtype: FluxBroker
        """
        return self._lead_broker

    @lead_broker.setter
    def lead_broker(self, lead_broker):
        """Sets the lead_broker of this Bursting.


        :param lead_broker: The lead_broker of this Bursting.  # noqa: E501
        :type lead_broker: FluxBroker
        """

        self._lead_broker = lead_broker

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Bursting):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Bursting):
            return True

        return self.to_dict() != other.to_dict()
